=====================================================================
                        Données slitless CTIO
=====================================================================

:Time-stamp: <2019-02-13 11:09:00 ycopin>
:Authors:
   
   Y. Copin
   J. Neveu

Generic information
===================

Introduction
------------

* Telescope: CTIO 0.9m
* Detector: Tek2K_3, pixsize=0.401 arcsec/pix
* Distance CCD-disperseur: environ 56 ± 5 mm

Preprocessed exposures:

* `reduc_20170530_130.fits`: CALSPEC HD111980 (x0, y0 = 791, 703 px)
  avec Ronchi 400 traits/mm (seeing 0''593, airmass X=1.114)

  .. image:: reduc_20170530_130.png
     :width: 50%

* `reduc_20170605_005.fits`: nébuleuse planétaire (x0, y0 = 745, 653 px)
  avec fond bizarre, hologramme ~360 traits/mm (seeing 0''699, airmass
  X=1.193)

  .. image:: reduc_20170605_005.png
     :width: 50%

reduc_20170530_130
------------------

**Ref.:** J. Neveu (08-11-18)

Voici en pièce jointe (`dispersion_relation.txt`) le fichier de
sortie, une image du spectre et un tableau donnant la conversion
pixels<->lambdas (nm), les pixels étant comptés à partir du centroid
de l'ordre zéro estimé à::

  2018-11-08 15:03:24  Image      find_target          INFO
      X,Y target position in pixels: 748.005,684.256
  2018-11-08 15:03:24  Image      turn_image           INFO
      Rotate the image with angle theta=-0.63 degree

je te donne l'angle de rotation au cas où aussi. Pour charger la
relation de dispersion::

  deltapix, lambdas = np.loadtxt('dispersion_relation.txt').T

Couverture spectrale (`reduc_20170530_130_spectrum.fits`): 352.0 -- 1027.5 nm

.. image:: reduc_20170530_130_spectrum.png
   :width: 50%

`reduc_20170530_130_table.csv`
------------------------------

**Ref.:** J. Neveu (12-02-19)

Le fichier `reduc_20170530_130_table.csv` contient les éléments à mettre en
forme:

* lambdas: la colonne des longueurs d'onde en nm
* Dx: la distance à l'ordre 0 en pixels selon x
* Dy: la distance à l'ordre 0 en pixels selon y
* les 7 dernières colonnes permettent d'alimenter le modèle de ma PSF qui est
  une Moffat - Gauss avec la classe ci-dessous, les titres des colonnes
  correspondant exactement aux noms des paramètres à donner à `.evaluate()`

.. code-block:: python
   :linenos:
           
   from astropy.modeling import Fittable1DModel, Parameter
   
   class PSF1D(Fittable1DModel):
       inputs = ('x',)
       outputs = ('y',)
   
       amplitude_moffat = Parameter('amplitude_moffat', default=0.5)
       x_mean = Parameter('x_mean', default=0)
       gamma = Parameter('gamma', default=3)
       alpha = Parameter('alpha', default=3)
       eta_gauss = Parameter('eta_gauss', default=1)
       stddev = Parameter('stddev', default=1)
       saturation = Parameter('saturation', default=1)
   
       @staticmethod
       def evaluate(x, amplitude_moffat, x_mean, gamma, alpha, eta_gauss, stddev, saturation):
           rr = (x - x_mean) * (x - x_mean)
           rr_gg = rr / (gamma * gamma)
           # use **(-alpha) instead of **(alpha) to avoid overflow power errors due to high alpha exponent
           a = amplitude_moffat * ( (1 + rr_gg) ** (-alpha) + eta_gauss * np.exp(-(rr / (2. * stddev * stddev))))

           return np.clip(a, 0, saturation)

   class PSF2D(Fittable2DModel):
       inputs = ('x', 'y',)
       outputs = ('z',)
   
       amplitude = Parameter('amplitude', default=1)
       x_mean = Parameter('x_mean', default=0)
       y_mean = Parameter('y_mean', default=0)
       gamma = Parameter('gamma', default=3)
       alpha = Parameter('alpha', default=3)
       eta_gauss = Parameter('eta_gauss', default=0.5)
       stddev = Parameter('stddev', default=1)
       saturation = Parameter('saturation', default=1)
   
       @staticmethod
       def evaluate(x, y, amplitude, x_mean, y_mean, gamma, alpha, eta_gauss, stddev, saturation):
           rr = ((x - x_mean) ** 2 + (y - y_mean) ** 2)
           rr_gg = rr / (gamma * gamma)
           a = amplitude * ((1 + rr_gg) ** (-alpha) + eta_gauss * np.exp(-(rr / (2. * stddev * stddev))))
           
           return np.clip(a, 0, saturation)
               
           
Generic model
=============

Dispersion law: y [m] = order * rho [lines/m] * wavelength [m] * f [m]
with:

* order = +1
* rho = 400 lines/mm
* f = 56 mm

so y [µm] = 1 * 400e3 * 56e-3 * l[µm] = 22.4e3 * l[µm]
